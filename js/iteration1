class Game {
    constructor() {
        this.time = 0;
        this.boxArr = [];
    }
    start() {
        console.log("starting game...")
        const boxes = new Boxes();

        console.log(boxes.boxesArray)

        setInterval(() => {
            console.log('interval works..')
            boxes.addBoxesLayer();
            console.log(boxes.boxesArray)

            boxes.newBox();
            
        },5000
        )
    }

    attachEventListeners() {
        document.addEventListener('keydown', (event) => {
            //console.log(event);
            if(event.key==="ArrowLeft") {
                //console.log("you pressed arrow left");
                this.player.moveLeft();
            }
            else if(event.key==="ArrowRight") {
                //console.log("you pressed arrow right");
                this.player.moveRight();
            }
        }
        );
    }

}

class Boxes {
    constructor() {
        this.width = 60; // for all boxes
        this.height = 20; // for all boxes
        this.boxesPerRow = 5; //for all boxes

        //maxheight of layer
        this.positionY = 0; 

        // position of New Box
        this.positionXactive = this.boxesPerRow*this.width/2 - this.width/2;
        this.positionYactive = 200;

    

        this.arrayOfColors = ['red', 'violet', 'green', 'yellow']
        
        this.boxesArray = [[],[],[],[],[]]
        //this.boxesArray = new Array(5).fill([]);
        
        //this.boxesLayer = this.createBoxesLayer();

        //this.domElement = this.createDomElement();
    }

    addBoxesLayer() {

        let positionHor = 0;
        for (let i=0; i<this.boxesArray.length ; i++) {
        // create new layer in boxesArray
            const random = Math.floor(Math.random() * this.arrayOfColors.length);
            const boxcolor = this.arrayOfColors[random];
            this.boxesArray[i].unshift(boxcolor)
            //console.log(this.boxesArray[i])
        // create new domElements
            const newBoxElm = document.createElement('div')
            newBoxElm.className = "box";

            newBoxElm.style.width = this.width + "px";
            newBoxElm.style.height = this.height + "px";
            newBoxElm.style.backgroundColor = boxcolor;
            newBoxElm.style.left = positionHor + "px";
            newBoxElm.style.bottom = this.positionY + "px";

            const boardElm = document.getElementById("board");
            boardElm.appendChild(newBoxElm);
            
            positionHor+=this.width;
            
        }
        
        this.positionY+=this.height;
        console.log(this.positionY);
    }
    


}


class MovedBox extends Box {
    constructor() {
        this.positionX
    }
    
    newBox() {
        const random = Math.floor(Math.random() * this.arrayOfColors.length);
        const boxcolor = this.arrayOfColors[random];
        console.log(boxcolor)
        
        const newBoxElm = document.createElement('div')
        newBoxElm.className = "box";
        
        newBoxElm.style.width = this.width + "px";
        newBoxElm.style.height = this.height + "px";
        newBoxElm.style.backgroundColor = boxcolor;
        newBoxElm.style.left = this.positionXactive + "px";
        // newBoxElm.style.bottom = 500 + "px";
        
        const boardElm = document.getElementById("board");
        boardElm.appendChild(newBoxElm);
    }
    
    moveDown() {
        this.positionYactive--;
        this.domElement.style.bottom = this.positionYactive + "px";
    
    }
}


// class BoxToAdd {
//     constructor() {
//         this.width = 60;
//         this.height = 20;
//         this.boxesPerRow = 5;
    
//         this.arrayOfColors = ['red', 'violet', 'green', 'yellow']
//     }

//     create
// }

const game = new Game();
game.start();






/*


let position = [2, 2]; 
let color = 'red';

let array = [
    ['violet', 'yellow','violet'],
    ['violet', 'yellow','violet'],
    ['yellow', 'red','red'],
    ['green', 'yellow','red'],
    ['violet', 'yellow','green'],
]

// [['violet', 'violet', 'yellow', 'green', 'violet'],
// ['yellow', 'yellow', 'red', 'yellow', 'yellow'],
// ['violet', 'violet', 'red', 'red', 'green']];



function checkNeighborsZ (arr, value, coord) {
    let neighborsZ = [coord];
    const y = coord[0];
    const z = coord[1];
    console.log('current box is ' + arr[y][z]);
    console.log('box below is ' + arr[y][z-1]);
    if (arr[y][z-1] == value) {
        neighborsZ.push([y, z-1]);
        if (arr[y][z-2] == value){
            neighborsZ.push([y, z-2]);
        }
    }
    // if (arr[y][z+1] == value) {
    //         neighborsZ.push([y, z+1]);
    // }
    return neighborsZ;
}

function checkNeighborsY (arr, value, coord) {
    let neighborsY = [];
    const y = coord[0];
    const z = coord[1];
    if (arr[y+1][z] == value) {
        neighborsY.push([y+1, z]);
        if (arr[y+2][z] == value) {
            neighborsY.push([y+2, z]);
        } 
    }
    if (arr[y-1][z] == value) {
        neighborsY.push([y-1, z]);
        if (arr[y-2][z] == value) {
            neighborsY.push([y-2, z]);
        }
    }
    return neighborsY;
}

function checkNeighborsZiteration2 (arr, value, coord) {
    let neighborsZ2 = [];
    const y = coord[0];
    const z = coord[1];
    if (arr[y][z+1] == value) {
            neighborsZ2.push([y, z+1]);
    }
    if (arr[y][z-1] == value) {
        neighborsZ2.push([y, z+1]);
}
    return neighborsZ2;
}

const arrayOfCoord = []


const arrayOfZ = checkNeighborsZ(array, color, position);
console.log(arrayOfZ);
//console.log('------------------');

arrayOfCoord.push.apply(arrayOfCoord, arrayOfZ);

arrayOfZ.forEach(element => {
    //console.log(element)
    const arrayOfY = checkNeighborsY (array, color, element);
    //console.log(arrayOfY);
    //console.log(arrayOfY.length);
    if (arrayOfY.length>0) {
        arrayOfCoord.push.apply(arrayOfCoord, arrayOfY)
        arrayOfY.forEach(element => {
            const arrayOfZ2 = checkNeighborsZiteration2(array, color, element);
            if (arrayOfZ2.length>0) {
                arrayOfCoord.push.apply(arrayOfCoord, arrayOfZ2)
            }
        })
    }   
})



console.log('------------------');
console.log(arrayOfCoord);
console.log(arrayOfCoord.length);








/* testarray = [1, 2 ,3]
newtestarray = testarray.forEach(function (element) {
    element++; 
})
console.log(newtestarray); */
